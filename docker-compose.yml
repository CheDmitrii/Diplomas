version: '3.9'

services:

  redis:
    image: redis/redis-stack:latest
    #redis - single redis container
    #/redis-stack - is an enhanced version of the classic Redis that combines the core Redis OSS server with a set of powerful modules and modern capabilities for real-time data processing in a single package.
    #      Modules:
    #       - RedisJSON – working with JSON documents, allowing you to store and efficiently manipulate structured data.
    #       - RediSearch – full-text search and complex querying capabilities.
    #       - RedisTimeSeries – a specialized module for storing and analyzing time-series data.
    #       - RedisBloom – probabilistic data structures for memory-efficient operations, such as Bloom filters.
    #       - (It may also include RedisGraph and other modules depending on the version.)
    #/redis-stack-server - like /redis-stack but without RedisInsight (graphic interface)
    #COMMAND TO RUN REDIS:
    # - 'redis-server' run single redis
    # - 'redis-stack' run redis stack
    # - 'redis-stack-serer' run redis stack server
    # '--protected-mode no' off secured mode that allow connect any configuring interfaces (like localhost, 127.0.0.1 etc)
    # COMMAND for getting users
    #-----------------------------------
    # redis-cli -a password ACL LIST
    #-----------------------------------
    # command '~* +@all'
    #   ~* - access for any keys
    #   +@all - allow executing any command
    # if modules don't loaded ( --loadmodule /opt/redis-stack/lib/redisearch.so; --loadmodule /opt/redis-stack/lib/rejson.so; etc)
    #
    # ANOTHER WAY TO WRITE docker-compose
    # may instead command create files and mountain it in docker container
    # DATA of users.acl file (can add 'user default off' line then off default user):
    #     user redis on >password ~* +@all
    # DATA of redis.conf file (can add 'user default off' line then off default user):
    #     bind 0.0.0.0
    #     aclfile /usr/local/etc/redis/users.acl
    # add volumes in docker-compose
    #     volumes:
    #      - ./docker/redis/config/users.acl:/usr/local/etc/redis/users.acl:ro
    #      - ./docker/redis/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    #
    # and add environment REDIS_ARGS that add when container start (--protected-mode no don't nee if it exist in users.acl file)
    #    environment:
    #      - REDIS_ARGS=--aclfile /usr/local/etc/redis/users.acl --protected-mode no
    # command: redis-stack-server /usr/local/etc/redis/redis.conf
    command: >
         sh -c '
                       mkdir -p /usr/local/etc/redis &&
                       touch /usr/local/etc/redis/redis.conf &&
                       touch /usr/local/etc/redis/users.acl &&
                       grep -qxF "user default off" /usr/local/etc/redis/users.acl ||
                       echo "user default off" >> /usr/local/etc/redis/users.acl &&
                       grep -qxF "user redis on >password ~* +@all" /usr/local/etc/redis/users.acl ||
                       echo "user redis on >password ~* +@all" >> /usr/local/etc/redis/users.acl &&
                       echo "bind 0.0.0.0\nprotected-mode no" > /usr/local/etc/redis/redis.conf &&
                       redis-stack-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
              '
    ports:
      - "6379:6379" # port for redis
#      - "8001:8001" # port for redisinsight (for redisinsight abd server together, but if use only redisinsight then port should be 5540)
    networks:
      - redis-net

  redisinsight:
    # in host in browser put 'redis' in host parameter as it name of service (to show it run 'docker-compose ps' command when you up your compose
    image: redis/redisinsight:latest
    ports:
      - "5540:5540" # for single redisinsight
    networks:
      - redis-net

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
#    hostname: localhost
    environment:
      KAFKA_LOG_RETENTION_HOURS: 3 # nor yet reboot with this parameter
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_NODE_ID: 1
#      KAFKA_KRAFT_CLUSTER_ID: ZSJucKzxTtGjE97lq_Vn7Q

#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    ports:
#      - "7070:8080"
#    environment:
#      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: localhost:9092
#      KAFKA_CLUSTERS_0_NAME: kraft
#      DYNAMIC_CONFIG_ENABLED: true


  postgres:
    image: postgres
    environment:
      POSTGRES_DB: monitoring_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"

networks:
  redis-net: